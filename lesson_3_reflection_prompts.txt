When would you want to use a remote repository rather than keeping all your work
local?

    When I'm collaborating with other people, when I'm working on more than one 
    computer, or as an offsite backup of my work

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If you are using the files in an application, you don't want it to change
    behavior until you are ready.  This way, you can go back to a prevous 
    version right away if there is a problem.  Also other people won't need
    to pull the version until they know it is debugged.  Not everyone will want
    to use the latest version.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    These are different ways to copy a repository.  A fork copies a repository
    from one Github account to yours, so you can make changes without affecting
    the original.  A clone copies an entire repository from one place which can
    be Github, to your own computer. A branch is a label on the commit tree
    where a commit diverges from the master, so that development can go in
    different directions simultaneously without the branches interferring with
	each other.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Obviously, it would be available for reference even if you weren't online
    and logged into GitHub.  But, it would also be available for performing a
    git merge which would generate the conflict resolution information in the
    file being merged.  To do that, both versions must be on the computer.
    

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    We would communicate via phone, email, or whatever message method was most
    conv enient.  Everyone would need to see both copies of the file(s) being
    disc ussed, so we would either paste into email, or use some sort of file
    server we c ould all access, and then we would need to communicate the 
    links. So, we woul d probably need at least two modes of communicate 
    active, one for the diff erences and comments and one for the file(s).  
    Unless we already have a syst em that combines both versons of the file and 
    related comments into a unit, it's going to be difficult to stay organized. 
    If we wanted to come back months late r and figure out what we did, it 
    would be almost impossible.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
